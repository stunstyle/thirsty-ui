{"version":3,"sources":["components/RandomCard.js","components/Home.js","components/Login.js","components/Register.js","components/About.js","routes.js","serviceWorker.js","index.js"],"names":["RandomCard","props","refresh","bind","state","error","isLoaded","items","strIngredients","that","this","fetch","then","res","json","result","drink","drinks","ingredients","Object","keys","forEach","key","startsWith","console","log","setState","message","Card","CardImg","top","width","src","strDrinkThumb","alt","CardBody","CardTitle","className","strDrink","CardSubtitle","strAlcoholic","CardText","values","map","val","k","item","index","Button","color","onClick","React","Component","Home","Container","Row","Col","xs","ButtonGroup","vertical","class","Login","Form","FormGroup","Label","for","Input","type","name","id","placeholder","Register","About","ThirstyNav","Navbar","light","expand","NavbarBrand","href","Nav","navbar","NavItem","NavLink","to","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97feb3f3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardImg, CardBody, CardTitle, CardSubtitle, CardText, Button } from 'reactstrap';\r\n\r\nclass RandomCard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: [],\r\n            strIngredients: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        var that = this;\r\n        fetch(\"https://www.thecocktaildb.com/api/json/v1/1/random.php\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    var drink = result.drinks[0];\r\n                    var ingredients = {};\r\n                    Object.keys(drink).forEach(function (key) {\r\n                        if (drink[key] != null && key.startsWith(\"strIngredient\")) {\r\n                            ingredients[key] = drink[key];\r\n                        }\r\n                    });\r\n                    console.log(ingredients);\r\n\r\n                    that.setState({\r\n                        isLoaded: true,\r\n                        items: result.drinks,\r\n                        strIngredients: ingredients,\r\n                    });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items, strIngredients } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <Card>\r\n                    <CardImg top width=\"100%\" src={items[0].strDrinkThumb} alt=\"Card image cap\" />\r\n                    <CardBody>\r\n                        <CardTitle className=\"font-weight-strong\">{items[0].strDrink}</CardTitle>\r\n                        <CardSubtitle className=\"font-italic\">{items[0].strAlcoholic}</CardSubtitle>\r\n                        <CardText><p>{Object.values(strIngredients).map((val, k) => <span>{val}</span>).map((item, index) => [index > 0 && ', ', item])}</p></CardText>\r\n                        <Button color=\"primary\" onClick={this.refresh}>I'm feeling lucky!</Button>\r\n                    </CardBody>\r\n                </Card>\r\n                // <ul>\r\n                //     {items.map(item => (\r\n                //         <li key={item.strDrink}>\r\n                //             {item.strDrink} {item.strGlass}\r\n                //         </li>\r\n                //     ))}\r\n                // </ul>\r\n            );\r\n        }\r\n    }\r\n\r\n    refresh() {\r\n        fetch(\"https://www.thecocktaildb.com/api/json/v1/1/random.php\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    var drink = result.drinks[0];\r\n                    var ingredients = {};\r\n                    Object.keys(drink).forEach(function (key) {\r\n                        if (drink[key] != null && key.startsWith(\"strIngredient\")) {\r\n                            ingredients[key] = drink[key];\r\n                        }\r\n                    });\r\n                    console.log(ingredients);\r\n\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result.drinks,\r\n                        strIngredients: ingredients,\r\n                    });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n}\r\nexport default RandomCard;","import React from 'react';\r\n\r\nimport { Button, ButtonGroup, Container, Row, Col, } from 'reactstrap';\r\nimport RandomCard from './RandomCard';\r\n\r\nfunction Home() {\r\n    return (\r\n        <Container className=\"container-fluid\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col xs=\"3\"></Col>\r\n                <Col xs=\"3\">\r\n                    <h1>Cocktails</h1>\r\n                </Col>\r\n                <Col xs=\"3\"></Col>\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n                <Col xs=\"3\">\r\n                    <ButtonGroup vertical>\r\n                        <Button>View all</Button>\r\n                        <Button>Most popular</Button>\r\n                        <Button>Cocktail of the month</Button>\r\n                    </ButtonGroup>\r\n                </Col>\r\n                <Col xs=\"4\">\r\n                    <RandomCard>\r\n\r\n                    </RandomCard>\r\n                </Col>\r\n                <Col xs=\"3\">\r\n                    <img class=\"img-fluid\" src=\"https://via.placeholder.com/120x600?text=120x600+Skyscraper\"/>\r\n                </Col>\r\n            </Row>\r\n            <Row xs=\"3\"></Row>\r\n        </Container>\r\n    );\r\n}\r\nexport default Home;","import React from \"react\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nfunction Login() {\r\n    return (\r\n        <Form>\r\n            <FormGroup>\r\n                <Label for=\"email\">email</Label>\r\n                <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"john.doe@mail.com\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"password\">password</Label>\r\n                <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\" />\r\n            </FormGroup>\r\n            <Button>Login</Button>\r\n        </Form>\r\n    );\r\n}\r\nexport default Login;","import React from \"react\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nfunction Register() {\r\n    return (\r\n        <Form>\r\n            <FormGroup>\r\n                <Label for=\"email\">email</Label>\r\n                <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"john.doe@mail.com\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"password\">password</Label>\r\n                <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"confirmPass\">confirm</Label>\r\n                <Input type=\"password\" name=\"confirmPass\" id=\"confirmPass\" placeholder=\"confirm\" />\r\n            </FormGroup>\r\n            <Button>Register</Button>\r\n        </Form>\r\n    );\r\n}\r\nexport default Register;","import React from \"react\";\r\n\r\nfunction About() {\r\n    return(\r\n        <div>kur</div>\r\n    );\r\n}\r\nexport default About;","import React from \"react\";\r\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\r\nimport { Nav, Navbar, NavbarBrand, NavItem, NavLink } from 'reactstrap';\r\n\r\nimport Home from './components/Home';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport About from './components/About';\r\n\r\n\r\n// This site has 3 pages, all of which are rendered\r\n// dynamically in the browser (not server rendered).\r\n//\r\n// Although the page does not ever refresh, notice how\r\n// React Router keeps the URL up to date as you navigate\r\n// through the site. This preserves the browser history,\r\n// making sure things like the back button and bookmarks\r\n// work properly.\r\n\r\nexport default function BasicExample() {\r\n    return (\r\n        <Router>\r\n            <ThirstyNav />\r\n\r\n            {/*\r\n          A <Switch> looks through all its children <Route>\r\n          elements and renders the first one whose path\r\n          matches the current URL. Use a <Switch> any time\r\n          you have multiple routes, but you want only one\r\n          of them to render at a time\r\n        */}\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <Login />\r\n                    </Route>\r\n                    <Route path=\"/register\">\r\n                        <Register />\r\n                    </Route>\r\n                    <Route path=\"/about\">\r\n                        <About />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router >\r\n    );\r\n}\r\n\r\nfunction ThirstyNav() {\r\n    return (\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n            <NavbarBrand href=\"/\">thirsty</NavbarBrand>\r\n            <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavLink><Link to=\"/login\">login</Link></NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink><Link to=\"/register\">register</Link></NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink><Link to=\"/about\">about</Link></NavLink>\r\n                </NavItem>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n}\r\n// You can think of these components as \"pages\"\r\n// in your app.\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './routes.js';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}